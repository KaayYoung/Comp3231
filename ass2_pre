1.What is the numerical value of the exception code for a MIPS system call (Hint: EX_SYS)?
      #define EX_SYS    8    /* Syscall */
2.How many bytes is an instruction in MIPS? (Answer this by reading syscall() carefully, not by looking somewhere else.)
      // 128 bytes (32 instructions).
3.What is the contents of the struct trapframe? Where is the struct trapframe that is passed into syscall() stored?
      // Structure describing what is saved on the stack during entry to the exception handler.
      
4.What would be required to implement a system call that took more than 4 arguments?
      // Arguments beyond the fourth are passed on the stack (See Tut week3: System calls)
5.What is the purpose of userptr_t?
      // refer to an address that specifically exists in userspace.
6.What is the difference between UIO_USERISPACE and UIO_USERSPACE? When should one use UIO_SYSSPACE instead?
      // UIO_USERISPACE and UIO_USERSPACE stand for user process code and user process data respectively. 
      // One should use UIO_SYSSPACE when writing data to a kernel buffer.
7.Why can the struct uio that is used to read in an ELF segment be allocated on the stack in load_segment() (i.e., where is the destination memory for the read)?
      // The uio struct contains a iovec, which wraps a buffer that is the destination of the memory read. 
      // The uio, however, also specifies the address space as that of the current thread, so the read happen into the user address space
8.In what file are copyin() and copyout() defined? memmove()? Why can't copyin() and copyout() be implemented as simply as memmove()?
      //copyin() and copyout() are defined in copyinout.c and memmove() is defined in memmove.c. 
      //copyin()/copyout() copies block of memory across user/kernel addresses ensuring that user pointers are not accessing offlimit addresses, something that memmove() is not capable of doing
9.How are vfs_open, vfs_close used? What other vfs_() calls are relevant?
      // vfs_open will destory path name
10.What are VOP_READ, VOP_WRITE? How are they used?
      
11.What does VOP_ISSEEKABLE do?
      // Check if this file is seekable. All regular files and directories are seekable, but some devices are not
12.Where is the struct thread defined? What does this structure contain
      
